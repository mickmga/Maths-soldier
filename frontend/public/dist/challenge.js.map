{
  "version": 3,
  "sources": ["../../src/challenge.ts"],
  "sourcesContent": ["export {};\r\n\r\nconst MAPS: HTMLElement[] = [];\r\nconst heroContainer = document.getElementById(\"hero_container\")!;\r\nconst heroImage = document.getElementById(\"heroImg\")! as HTMLImageElement;\r\nconst enemy = document.getElementById(\"enemyImg\")! as HTMLImageElement;\r\nconst enemyContainer = document.getElementById(\"enemy_container\")!;\r\nconst errorScoreContainer = document.getElementById(\"error_score\")!;\r\nconst successfulKillsScoreContainer = document.getElementById(\"killed_score\")!;\r\nlet errorScore = 0;\r\nlet successfulKillsScore = 0;\r\n\r\nconst opponnentsOnScreen = [enemy];\r\n\r\nlet opponentsOnTheRight = [enemy];\r\n\r\n//local storage\r\n\r\nlet backgroundSrc = \"assets/challenge/maps/challenge_castle.webp\";\r\n\r\nconst makeId = (length: number) => {\r\n  let result = \"\";\r\n  const characters =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  const charactersLength = characters.length;\r\n  let counter = 0;\r\n  while (counter < length) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    counter += 1;\r\n  }\r\n  return result;\r\n};\r\n\r\nenum ANIMATION_ID {\r\n  attack,\r\n  run,\r\n  walk,\r\n  opponent_run,\r\n  camera_left_to_right,\r\n  camera_right_to_left,\r\n  character_left_to_right_move,\r\n}\r\n\r\nconst ANIMATION_RUNNING_VALUES = {\r\n  [ANIMATION_ID.attack]: 0,\r\n  [ANIMATION_ID.run]: 0,\r\n  [ANIMATION_ID.walk]: 0,\r\n  [ANIMATION_ID.opponent_run]: 0,\r\n  [ANIMATION_ID.camera_left_to_right]: 0,\r\n  [ANIMATION_ID.camera_right_to_left]: 0,\r\n  [ANIMATION_ID.character_left_to_right_move]: 0,\r\n};\r\n\r\nconst createMapBlock = (left: number) => {\r\n  const block = document.createElement(\"div\");\r\n  block.classList.add(\"mapBlock\");\r\n  const backgroundImage = document.createElement(\"img\");\r\n  backgroundImage.src = backgroundSrc;\r\n  block.append(backgroundImage);\r\n  block.style.position = \"fixed\";\r\n  block.style.left = `${left}px`;\r\n\r\n  document.getElementsByTagName(\"body\")[0].append(block);\r\n\r\n  return block;\r\n};\r\n\r\nconst moveCamera = (direction: ANIMATION_ID) => {\r\n  if (\r\n    ANIMATION_RUNNING_VALUES[direction] === 0 ||\r\n    ANIMATION_RUNNING_VALUES[direction] > 1\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  MAPS.forEach(\r\n    (map) =>\r\n      (map.style.left = `${\r\n        map.offsetLeft +\r\n        (direction === ANIMATION_ID.camera_left_to_right ? -1 : 1) * 4\r\n      }px`)\r\n  );\r\n\r\n  requestAnimationFrame(() => moveCamera(direction));\r\n};\r\n\r\nconst updateScores = () => {\r\n  errorScoreContainer.innerHTML = \"Erreurs: \" + errorScore.toString();\r\n  successfulKillsScoreContainer.innerHTML =\r\n    \"Bonnes r\u00E9ponses: \" + successfulKillsScore.toString();\r\n};\r\n\r\nconst launchAnimationAndDeclareItLaunched = (\r\n  characterElement: HTMLImageElement,\r\n  throttleNum: number,\r\n  extension: string,\r\n  spriteBase: string,\r\n  spriteIndex: number,\r\n  max: number,\r\n  min: number,\r\n  loop: boolean,\r\n  animationId: ANIMATION_ID\r\n) => {\r\n  ANIMATION_RUNNING_VALUES[animationId]++;\r\n\r\n  launchCharacterAnimation(\r\n    characterElement,\r\n    throttleNum,\r\n    extension,\r\n    spriteBase,\r\n    spriteIndex,\r\n    max,\r\n    min,\r\n    loop,\r\n    animationId\r\n  );\r\n};\r\n\r\nconst launchCharacterAnimation = (\r\n  characterElement: HTMLImageElement,\r\n  throttleNum: number,\r\n  extension: string,\r\n  spriteBase: string,\r\n  spriteIndex: number,\r\n  max: number,\r\n  min: number,\r\n  loop: boolean,\r\n  animationId: ANIMATION_ID\r\n): any => {\r\n  if (!characterElement) alert(\"no element no more!\");\r\n\r\n  if (\r\n    !ANIMATION_RUNNING_VALUES[animationId] ||\r\n    ANIMATION_RUNNING_VALUES[animationId] > 1\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < 5) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      launchCharacterAnimation(\r\n        characterElement,\r\n        throttleNum,\r\n        extension,\r\n        spriteBase,\r\n        spriteIndex,\r\n        max,\r\n        min,\r\n        loop,\r\n        animationId\r\n      )\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  if (spriteIndex === max) {\r\n    if (loop === false) {\r\n      return;\r\n    }\r\n\r\n    spriteIndex = min;\r\n  } else {\r\n    spriteIndex++;\r\n  }\r\n\r\n  characterElement.src = `${spriteBase}/${spriteIndex}.${extension}`;\r\n\r\n  requestAnimationFrame(() =>\r\n    launchCharacterAnimation(\r\n      characterElement,\r\n      throttleNum,\r\n      extension,\r\n      spriteBase,\r\n      spriteIndex,\r\n      max,\r\n      min,\r\n      loop,\r\n      animationId\r\n    )\r\n  );\r\n};\r\n\r\nconst initAnimation = (animationId: ANIMATION_ID) => {\r\n  ANIMATION_RUNNING_VALUES[animationId] = 0;\r\n};\r\n\r\nconst launchAttack = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/hero/attack\",\r\n    1,\r\n    4,\r\n    1,\r\n    false,\r\n    ANIMATION_ID.attack\r\n  );\r\n\r\n  setTimeout(() => {\r\n    if (\r\n      heroContainer.getBoundingClientRect().left +\r\n        heroContainer.getBoundingClientRect().width +\r\n        window.innerWidth * 0.05 >\r\n        enemyContainer.getBoundingClientRect().left &&\r\n      enemy\r\n    ) {\r\n      enemy.remove();\r\n      enemyOnScreen = false;\r\n      successfulKillsScore++;\r\n      updateScores();\r\n    }\r\n  }, 500);\r\n\r\n  setTimeout(() => {\r\n    launchAnimationAndDeclareItLaunched(\r\n      heroImage,\r\n      0,\r\n      \"png\",\r\n      \"assets/challenge/characters/hero/run\",\r\n      1,\r\n      8,\r\n      1,\r\n      true,\r\n      ANIMATION_ID.run\r\n    );\r\n    initAnimation(ANIMATION_ID.attack);\r\n  }, 1000);\r\n};\r\n\r\nconst launchOpponent = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    enemy,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/enemies/wolf\",\r\n    1,\r\n    9,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.opponent_run\r\n  );\r\n};\r\n\r\nlet enemyOnScreen = true;\r\n\r\nconst moveEnemy = () => {\r\n  if (!enemyOnScreen) return;\r\n\r\n  enemyContainer.style.left = `${enemyContainer.offsetLeft - 10}px`;\r\n\r\n  requestAnimationFrame(moveEnemy);\r\n};\r\n\r\nconst detectCollision = () => {\r\n  if (heroContainer.offsetLeft > enemyContainer.offsetLeft) {\r\n    errorScore++;\r\n    updateScores();\r\n\r\n    return;\r\n  }\r\n\r\n  requestAnimationFrame(detectCollision);\r\n};\r\n\r\nconst checkForScreenUpdateFromLeftToRight = (throttleNum: number): any => {\r\n  if (ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] === 0) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < 10) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      checkForScreenUpdateFromLeftToRight(throttleNum)\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  //deletion\r\n\r\n  //pick first map block\r\n\r\n  const firstMapDomElement = MAPS[0];\r\n\r\n  if (firstMapDomElement.offsetLeft < -window.innerWidth) {\r\n    firstMapDomElement.remove();\r\n    MAPS.shift();\r\n  }\r\n\r\n  //creation\r\n\r\n  const lastMapDomElement = MAPS[MAPS.length - 1];\r\n\r\n  if (\r\n    lastMapDomElement &&\r\n    lastMapDomElement.offsetLeft <= window.innerWidth / 10\r\n  ) {\r\n    MAPS.push(\r\n      createMapBlock(\r\n        lastMapDomElement.offsetLeft + lastMapDomElement.offsetWidth\r\n      )\r\n    );\r\n  }\r\n\r\n  requestAnimationFrame(() => checkForScreenUpdateFromLeftToRight(throttleNum));\r\n};\r\n\r\nconst checkForScreenUpdateFromRightToLeft = (throttleNum: number): any => {\r\n  if (ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_right_to_left] === 0) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < 10) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      checkForScreenUpdateFromRightToLeft(throttleNum)\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  //creation\r\n\r\n  //pick first map block\r\n\r\n  const firstMapDomElement = MAPS[0];\r\n\r\n  if (\r\n    firstMapDomElement &&\r\n    firstMapDomElement.offsetLeft > -window.innerWidth\r\n  ) {\r\n    MAPS.unshift(\r\n      createMapBlock(\r\n        firstMapDomElement.offsetLeft - firstMapDomElement.offsetWidth\r\n      )\r\n    );\r\n  }\r\n\r\n  //deletion\r\n\r\n  const lastMapDomElement = MAPS[MAPS.length - 1];\r\n\r\n  if (lastMapDomElement && lastMapDomElement.offsetLeft > window.innerWidth) {\r\n    lastMapDomElement.remove();\r\n    MAPS.pop();\r\n  }\r\n\r\n  requestAnimationFrame(() => checkForScreenUpdateFromRightToLeft(throttleNum));\r\n};\r\n\r\n//CHALLENGE.TS ENDING\r\n\r\nconst initHero = () => {};\r\n\r\nconst launchCharacterMovement = () => {\r\n  moveCamera(ANIMATION_ID.camera_left_to_right);\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/palace/hero/old_walk\",\r\n    1,\r\n    6,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.walk\r\n  );\r\n};\r\n\r\nconst launchCharacterMovementLeft = () => {\r\n  moveCamera(ANIMATION_ID.camera_right_to_left);\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/palace/hero/walk_left\",\r\n    1,\r\n    6,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.walk\r\n  );\r\n};\r\n\r\nconst launchRun = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right]++;\r\n  moveCamera(ANIMATION_ID.camera_left_to_right);\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/hero/run\",\r\n    1,\r\n    8,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.run\r\n  );\r\n};\r\n\r\nconst heroInitialTop = heroContainer.getBoundingClientRect().top;\r\n\r\nconst launchFly = (jumpingForward = true) => {\r\n  // Get the hero's current position from the bottom style property\r\n  const currentTop = heroContainer.getBoundingClientRect().top;\r\n\r\n  if (jumpingForward) {\r\n    // Move the hero upwards\r\n    const newTop = currentTop - window.innerHeight * 0.005;\r\n    heroContainer.style.top = `${newTop}px`;\r\n\r\n    // Check if the hero has reached the peak\r\n    if (newTop <= heroInitialTop - window.innerHeight * 0.2) {\r\n      jumpingForward = false;\r\n    }\r\n  } else {\r\n    // Move the hero downwards\r\n    const newTop = currentTop + window.innerHeight * 0.005;\r\n    heroContainer.style.top = `${newTop}px`;\r\n\r\n    // Check if the hero has returned to the initial position\r\n    if (newTop >= heroInitialTop) {\r\n      heroContainer.style.top = `${heroInitialTop}px`;\r\n      //launchRun(); // Restart the run animation\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Continue the animation\r\n  requestAnimationFrame(() => launchFly(jumpingForward));\r\n};\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  if (event.key === \" \") {\r\n    launchFly();\r\n  }\r\n  if (event.key === \"w\") {\r\n    launchAttack();\r\n  }\r\n});\r\n\r\nconst checkForOpponentsClearance = () => {\r\n  opponnentsOnScreen.forEach((opponnentOnScreen) => {\r\n    if (\r\n      heroContainer.getBoundingClientRect().left +\r\n        heroContainer.getBoundingClientRect().width +\r\n        window.innerWidth * 0.05 >\r\n        enemyContainer.getBoundingClientRect().left &&\r\n      enemy\r\n    ) {\r\n    }\r\n    if (opponnentOnScreen.getBoundingClientRect().left < 0) {\r\n      opponnentOnScreen.remove();\r\n      opponnentsOnScreen.pop();\r\n    }\r\n  });\r\n\r\n  requestAnimationFrame(checkForOpponentsClearance);\r\n};\r\n\r\nwindow.onload = () => {\r\n  MAPS.push(createMapBlock(0));\r\n  MAPS.push(createMapBlock(100));\r\n  launchRun();\r\n  //moveCamera();\r\n  //launchAnimationAndDeclareItLaunched(heroImage, 0, 'png', 'assets/challenge/characters/hero/run', 1, 8, 1, true, ANIMATION_ID.run);\r\n  //launchOpponent();\r\n  moveEnemy();\r\n  detectCollision();\r\n  checkForScreenUpdateFromLeftToRight(10);\r\n  checkForOpponentsClearance();\r\n};\r\n"],
  "mappings": "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",
  "names": []
}

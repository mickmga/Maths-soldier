{
  "version": 3,
  "sources": ["../../src/challenge.ts", "../../src/boss.ts"],
  "sourcesContent": ["export {};\r\n\r\nconst MAPS: HTMLElement[] = [];\r\nconst heroContainer = document.getElementById(\"hero_container\")!;\r\nconst heroImage = document.getElementById(\"heroImg\")! as HTMLImageElement;\r\n\r\nconst scoreContainer = document.getElementById(\"score_value\")!;\r\n\r\nconst answerDataContainer = document.getElementById(\"answer_data_container\")!;\r\nconst answerDataValue = document.getElementById(\"answer_data_value\")!;\r\n\r\nconst scoreMalusContainer = document.getElementById(\"score_malus_container\")!;\r\nconst scoreMalusDetail = document.getElementById(\"score_malus_detail\")!;\r\n\r\nconst scoreRewardContainer = document.getElementById(\"score_reward_container\")!;\r\n\r\nconst scoreRewardDetail = document.getElementById(\"score_reward_detail\")!;\r\n\r\nconst TRANSFORMED_BONUS_RATIO = 5;\r\nconst KILLED_ENEMY_REWARD = 30;\r\nconst HERO_HURT_MALUS = 30;\r\n\r\nconst REWARD_TIMEOUT_DURATION = 2000;\r\n\r\nlet timeStoped = false;\r\n\r\nlet score = 0;\r\n\r\nlet heroIsAlive = true;\r\n\r\nconst lifePoints = { max: 4, value: 4 };\r\nlet INVISIBILITY_DURATION_IN_MILLISECONDS = 600;\r\n\r\nlet invisible = false;\r\n\r\nconst ennemiesOnScreen: Enemy[] = [];\r\n\r\nlet transformed = false;\r\n\r\nlet currentMalusContainerTimeout: ReturnType<typeof setTimeout> | null = null;\r\nlet currentRewardContainerTimeout: ReturnType<typeof setTimeout> | null = null;\r\nlet currentTransformationRewardContainerTimeout: ReturnType<\r\n  typeof setTimeout\r\n> | null = null;\r\n\r\nclass Answer {\r\n  data: string;\r\n  good: boolean;\r\n\r\n  constructor(data: string, good: boolean) {\r\n    this.data = data;\r\n    this.good = good;\r\n  }\r\n}\r\n\r\nclass Enemy {\r\n  element: HTMLElement;\r\n  answer: Answer;\r\n  collideable = true;\r\n\r\n  constructor(element: HTMLElement, answer: Answer) {\r\n    this.element = element;\r\n    this.answer = answer;\r\n  }\r\n}\r\n\r\nconst CAPITALS = {\r\n  title: \"Additions\",\r\n  good: [new Answer(\"10+3=6*8\", true), new Answer(\"10+10=20\", true)],\r\n  bad: [new Answer(\"3+6=10\", false), new Answer(\"2+3=7\", false)],\r\n};\r\n\r\n//local storage\r\n\r\nconst getNextAnswer = () => {\r\n  const randVal = Math.random() > 0.5;\r\n\r\n  if (randVal) {\r\n    return CAPITALS.good.length\r\n      ? CAPITALS.good.pop()\r\n      : CAPITALS.bad.length\r\n      ? CAPITALS.bad.pop()\r\n      : \"done\";\r\n  } else {\r\n    return CAPITALS.bad.length\r\n      ? CAPITALS.bad.pop()\r\n      : CAPITALS.good.length\r\n      ? CAPITALS.good.pop()\r\n      : \"done\";\r\n  }\r\n};\r\n\r\nconst updateLifePointsDisplay = () => {\r\n  for (let i = 1; i <= lifePoints.max; i++) {\r\n    const lifePointOpacity = i <= lifePoints.value ? \"1\" : \"0.3\";\r\n\r\n    document.getElementById(`lifePointContainer_${i}`)!.style.opacity =\r\n      lifePointOpacity;\r\n  }\r\n};\r\n\r\nconst buildEnemyElement = () => {\r\n  const newOpponentContainer = document.createElement(\"div\");\r\n  newOpponentContainer.classList.add(\"enemy_container\");\r\n  const newEnnemyImg = document.createElement(\"img\") as HTMLImageElement;\r\n  newEnnemyImg.src = \"assets/challenge/characters/enemies/wolf/1.png\";\r\n\r\n  newOpponentContainer.append(newEnnemyImg);\r\n\r\n  document.getElementsByTagName(\"body\")[0].append(newOpponentContainer);\r\n\r\n  return newOpponentContainer;\r\n};\r\n\r\nconst buildEnemy = (answer: Answer) => {\r\n  //construct opponent at a specific point, run it\r\n\r\n  const enemyElement = buildEnemyElement();\r\n\r\n  if (!enemyElement) {\r\n    console.log(\"error\");\r\n    return;\r\n  }\r\n\r\n  document.getElementsByTagName(\"body\")[0].append();\r\n\r\n  const enemy = new Enemy(enemyElement, answer);\r\n\r\n  ennemiesOnScreen.push(enemy);\r\n\r\n  return enemy;\r\n};\r\n\r\nconst buildAndLaunchEnemy = (answer: Answer) => {\r\n  const enemy = buildEnemy(answer);\r\n\r\n  if (!enemy) {\r\n    return;\r\n  }\r\n  lightUpAnswerDataContainer();\r\n\r\n  answerDataValue.innerHTML = enemy.answer.data;\r\n\r\n  launchOpponent(enemy);\r\n};\r\n\r\nconst triggerOpponentsApparition = () => {\r\n  const newAnswer = getNextAnswer();\r\n\r\n  if (newAnswer && newAnswer !== \"done\") {\r\n    buildAndLaunchEnemy(newAnswer);\r\n  } else {\r\n    console.log(\"we re done\");\r\n  }\r\n};\r\n\r\nlet backgroundSrc = \"assets/challenge/maps/challenge_castle.webp\";\r\n\r\nconst makeId = (length: number) => {\r\n  let result = \"\";\r\n  const characters =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  const charactersLength = characters.length;\r\n  let counter = 0;\r\n  while (counter < length) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    counter += 1;\r\n  }\r\n  return result;\r\n};\r\n\r\nexport enum ANIMATION_ID {\r\n  attack,\r\n  run,\r\n  walk,\r\n  hurt,\r\n  death,\r\n  idle,\r\n  stop_time,\r\n  cancel_stop_time,\r\n  opponent_run,\r\n  opponent_move,\r\n  opponent_death,\r\n  camera_left_to_right,\r\n  camera_right_to_left,\r\n  character_left_to_right_move,\r\n  transformation_pre_run,\r\n  transformation_run,\r\n  transformation_hurt,\r\n  boss_idle,\r\n  boss_attack,\r\n}\r\n\r\nexport const ANIMATION_RUNNING_VALUES = {\r\n  [ANIMATION_ID.attack]: 0,\r\n  [ANIMATION_ID.run]: 0,\r\n  [ANIMATION_ID.walk]: 0,\r\n  [ANIMATION_ID.death]: 0,\r\n  [ANIMATION_ID.hurt]: 0,\r\n  [ANIMATION_ID.idle]: 0,\r\n  [ANIMATION_ID.stop_time]: 0,\r\n  [ANIMATION_ID.cancel_stop_time]: 0,\r\n  [ANIMATION_ID.opponent_run]: 0,\r\n  [ANIMATION_ID.opponent_death]: 0,\r\n  [ANIMATION_ID.opponent_move]: 0,\r\n  [ANIMATION_ID.camera_left_to_right]: 0,\r\n  [ANIMATION_ID.camera_right_to_left]: 0,\r\n  [ANIMATION_ID.character_left_to_right_move]: 0,\r\n  [ANIMATION_ID.transformation_pre_run]: 0,\r\n  [ANIMATION_ID.transformation_run]: 0,\r\n  [ANIMATION_ID.transformation_hurt]: 0,\r\n  [ANIMATION_ID.boss_idle]: 0,\r\n  [ANIMATION_ID.boss_attack]: 0,\r\n};\r\n\r\nexport const THROTTLE_NUMS = {\r\n  [ANIMATION_ID.attack]: 0,\r\n  [ANIMATION_ID.run]: 5,\r\n  [ANIMATION_ID.walk]: 5,\r\n  [ANIMATION_ID.death]: 5,\r\n  [ANIMATION_ID.hurt]: 0,\r\n  [ANIMATION_ID.idle]: 20,\r\n  [ANIMATION_ID.stop_time]: 5,\r\n  [ANIMATION_ID.cancel_stop_time]: 5,\r\n  [ANIMATION_ID.opponent_run]: 5,\r\n  [ANIMATION_ID.opponent_death]: 0,\r\n  [ANIMATION_ID.opponent_move]: 0,\r\n  [ANIMATION_ID.camera_left_to_right]: 0,\r\n  [ANIMATION_ID.camera_right_to_left]: 5,\r\n  [ANIMATION_ID.character_left_to_right_move]: 5,\r\n  [ANIMATION_ID.transformation_pre_run]: 5,\r\n  [ANIMATION_ID.transformation_run]: 5,\r\n  [ANIMATION_ID.transformation_hurt]: 0,\r\n  [ANIMATION_ID.boss_idle]: 15,\r\n  [ANIMATION_ID.boss_attack]: 10,\r\n};\r\n\r\nconst createMapBlock = (left: number) => {\r\n  const block = document.createElement(\"div\");\r\n  block.classList.add(\"mapBlock\");\r\n  const backgroundImage = document.createElement(\"img\");\r\n  backgroundImage.src = backgroundSrc;\r\n  block.append(backgroundImage);\r\n  block.style.position = \"fixed\";\r\n  block.style.left = `${left}px`;\r\n\r\n  document.getElementsByTagName(\"body\")[0].append(block);\r\n\r\n  return block;\r\n};\r\n\r\nconst slowTime = (multiplicator: number) => {\r\n  const runMultiplicatorBase = THROTTLE_NUMS[ANIMATION_ID.run]\r\n    ? THROTTLE_NUMS[ANIMATION_ID.run]\r\n    : 1;\r\n  THROTTLE_NUMS[ANIMATION_ID.run] =\r\n    runMultiplicatorBase * multiplicator * 1.5 * 1.5;\r\n\r\n  const cameraMoveMultiplicatorBase = THROTTLE_NUMS[\r\n    ANIMATION_ID.camera_left_to_right\r\n  ]\r\n    ? THROTTLE_NUMS[ANIMATION_ID.camera_left_to_right]\r\n    : 1;\r\n  THROTTLE_NUMS[ANIMATION_ID.camera_left_to_right] =\r\n    cameraMoveMultiplicatorBase * multiplicator * 1.5;\r\n\r\n  const opponentRunMultiplicatorBase = THROTTLE_NUMS[ANIMATION_ID.opponent_run]\r\n    ? THROTTLE_NUMS[ANIMATION_ID.opponent_run]\r\n    : 1;\r\n  THROTTLE_NUMS[ANIMATION_ID.opponent_run] =\r\n    opponentRunMultiplicatorBase * multiplicator;\r\n\r\n  const opponentMoveMultiplicatorBase = THROTTLE_NUMS[\r\n    ANIMATION_ID.opponent_move\r\n  ]\r\n    ? THROTTLE_NUMS[ANIMATION_ID.opponent_move]\r\n    : 1;\r\n  THROTTLE_NUMS[ANIMATION_ID.opponent_move] =\r\n    opponentMoveMultiplicatorBase * multiplicator * 2;\r\n};\r\n\r\nconst moveCamera = (direction: ANIMATION_ID, throttleNum = 0): any => {\r\n  if (\r\n    ANIMATION_RUNNING_VALUES[direction] === 0 ||\r\n    ANIMATION_RUNNING_VALUES[direction] > 1\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < THROTTLE_NUMS[ANIMATION_ID.camera_left_to_right]) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() => moveCamera(direction, throttleNum));\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  MAPS.forEach(\r\n    (map) =>\r\n      (map.style.left = `${\r\n        map.offsetLeft +\r\n        (direction === ANIMATION_ID.camera_left_to_right ? -1 : 1) * 4\r\n      }px`)\r\n  );\r\n\r\n  requestAnimationFrame(() => moveCamera(direction));\r\n};\r\n\r\nexport const launchAnimationAndDeclareItLaunched = (\r\n  characterElement: HTMLImageElement,\r\n  throttleNum: number,\r\n  extension: string,\r\n  spriteBase: string,\r\n  spriteIndex: number,\r\n  max: number,\r\n  min: number,\r\n  loop: boolean,\r\n  animationId: ANIMATION_ID\r\n) => {\r\n  ANIMATION_RUNNING_VALUES[animationId]++;\r\n\r\n  launchCharacterAnimation(\r\n    characterElement,\r\n    throttleNum,\r\n    extension,\r\n    spriteBase,\r\n    spriteIndex,\r\n    max,\r\n    min,\r\n    loop,\r\n    animationId\r\n  );\r\n};\r\n\r\nconst launchCharacterAnimation = (\r\n  characterElement: HTMLImageElement,\r\n  throttleNum: number,\r\n  extension: string,\r\n  spriteBase: string,\r\n  spriteIndex: number,\r\n  max: number,\r\n  min: number,\r\n  loop: boolean,\r\n  animationId: ANIMATION_ID\r\n): any => {\r\n  if (!characterElement) alert(\"no element no more!\");\r\n\r\n  if (\r\n    !ANIMATION_RUNNING_VALUES[animationId] ||\r\n    ANIMATION_RUNNING_VALUES[animationId] > 1\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < THROTTLE_NUMS[animationId]) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      launchCharacterAnimation(\r\n        characterElement,\r\n        throttleNum,\r\n        extension,\r\n        spriteBase,\r\n        spriteIndex,\r\n        max,\r\n        min,\r\n        loop,\r\n        animationId\r\n      )\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  if (spriteIndex === max) {\r\n    if (loop === false) {\r\n      ANIMATION_RUNNING_VALUES[animationId] = 0;\r\n      return;\r\n    }\r\n\r\n    spriteIndex = min;\r\n  } else {\r\n    spriteIndex++;\r\n  }\r\n\r\n  characterElement.src = `${spriteBase}/${spriteIndex}.${extension}`;\r\n\r\n  requestAnimationFrame(() =>\r\n    launchCharacterAnimation(\r\n      characterElement,\r\n      throttleNum,\r\n      extension,\r\n      spriteBase,\r\n      spriteIndex,\r\n      max,\r\n      min,\r\n      loop,\r\n      animationId\r\n    )\r\n  );\r\n};\r\n\r\nconst initAnimation = (animationId: ANIMATION_ID) => {\r\n  ANIMATION_RUNNING_VALUES[animationId] = 0;\r\n};\r\n\r\nconst initAllAnimations = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.attack] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.death] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.hurt] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.idle] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_death] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_move] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_right_to_left] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.character_left_to_right_move] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_pre_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_hurt] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.boss_idle] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.boss_attack] = 0;\r\n};\r\n\r\nconst turnHeroTransformationOff = () => {\r\n  transformed = false;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_run] = 0;\r\n  launchHeroRunAnimation();\r\n};\r\n\r\nconst launchAttack = () => {\r\n  if (invisible) {\r\n    return;\r\n  }\r\n  if (transformed) {\r\n    ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_run] = 0;\r\n  } else {\r\n    ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n  }\r\n\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    `assets/challenge/characters/${\r\n      transformed ? \"transformed_hero\" : \"hero\"\r\n    }/attack`,\r\n    1,\r\n    transformed ? 12 : 4,\r\n    1,\r\n    false,\r\n    ANIMATION_ID.attack\r\n  );\r\n\r\n  const enemyCanBeHit = (enemy: Enemy) => {\r\n    return (\r\n      enemy.element.getBoundingClientRect().left >\r\n        heroContainer.getBoundingClientRect().left +\r\n          heroContainer.getBoundingClientRect().width &&\r\n      enemy.element.getBoundingClientRect().left <\r\n        heroContainer.getBoundingClientRect().left +\r\n          heroContainer.getBoundingClientRect().width +\r\n          window.innerWidth * 0.15\r\n    );\r\n  };\r\n\r\n  ennemiesOnScreen.forEach((enemy) => {\r\n    if (!enemyCanBeHit(enemy)) {\r\n      return;\r\n    }\r\n    if (!enemy.answer.good) {\r\n      killWrongEnemy(enemy);\r\n    } else {\r\n      killRightEnemyAndUpdateScore(enemy);\r\n    }\r\n  });\r\n\r\n  setTimeout(() => {\r\n    launchHeroRunAnimation();\r\n  }, 200);\r\n};\r\n\r\nconst launchOpponent = (enemy: Enemy) => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    enemy.element.firstChild as HTMLImageElement,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/enemies/wolf\",\r\n    1,\r\n    9,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.opponent_run\r\n  );\r\n  moveEnemy(enemy);\r\n};\r\n\r\nconst moveEnemy = (enemy: Enemy, throttleNum = 0): any => {\r\n  if (ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] !== 1) {\r\n    return;\r\n  }\r\n  if (throttleNum < THROTTLE_NUMS[ANIMATION_ID.opponent_move]) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() => moveEnemy(enemy, throttleNum));\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  enemy.element.style.left = `${\r\n    enemy.element.getBoundingClientRect().left - 10\r\n  }px`;\r\n\r\n  requestAnimationFrame(() => moveEnemy(enemy));\r\n};\r\n\r\nconst killRightEnemyAndUpdateScore = (enemy: Enemy) => {\r\n  killEnemy(enemy);\r\n\r\n  const bonus_ratio = transformed ? TRANSFORMED_BONUS_RATIO : 1;\r\n\r\n  score += bonus_ratio * KILLED_ENEMY_REWARD;\r\n  updateScoreDisplay();\r\n\r\n  displayReward(\"Congrats! You destroyed a good answer!\");\r\n\r\n  if (transformed) {\r\n    displayTransformationKillReward(\r\n      `Transformation bonus reward! X${TRANSFORMED_BONUS_RATIO}`\r\n    );\r\n  }\r\n};\r\n\r\nconst updateScoreDisplay = () => {\r\n  scoreContainer.innerHTML = score.toString();\r\n};\r\n\r\nconst killWrongEnemy = (enemy: Enemy) => {\r\n  scoreMalusContainer.style.display = \"flex\";\r\n\r\n  killEnemy(enemy);\r\n\r\n  displayMalus(\"MALUS! Wrong enemy killed!\");\r\n\r\n  score -= HERO_HURT_MALUS;\r\n  updateScoreDisplay();\r\n};\r\n\r\nconst displayMalus = (content: string) => {\r\n  if (currentMalusContainerTimeout) {\r\n    clearTimeout(currentMalusContainerTimeout);\r\n    currentMalusContainerTimeout = null;\r\n  }\r\n\r\n  // scoreMalusDetail.innerHTML = content;\r\n  scoreMalusContainer.style.display = \"flex\";\r\n\r\n  currentMalusContainerTimeout = setTimeout(() => {\r\n    scoreMalusDetail.innerHTML = \"\";\r\n    scoreMalusContainer.style.display = \"none\";\r\n  }, 2000);\r\n};\r\n\r\nconst hideMalus = () => {\r\n  hideReward();\r\n  if (currentMalusContainerTimeout) {\r\n    clearTimeout(currentMalusContainerTimeout);\r\n    currentMalusContainerTimeout = null;\r\n  }\r\n\r\n  scoreMalusDetail.innerHTML = \"\";\r\n  scoreMalusContainer.style.display = \"none\";\r\n};\r\n\r\nconst displayReward = (content: string) => {\r\n  hideMalus();\r\n  if (currentRewardContainerTimeout) {\r\n    clearTimeout(currentRewardContainerTimeout);\r\n    currentRewardContainerTimeout = null;\r\n  }\r\n\r\n  //  scoreRewardDetail.innerHTML = content;\r\n  scoreRewardContainer.style.display = \"flex\";\r\n\r\n  currentRewardContainerTimeout = setTimeout(() => {\r\n    scoreRewardDetail.innerHTML = \"\";\r\n    scoreRewardContainer.style.display = \"none\";\r\n  }, 2000);\r\n};\r\n\r\nconst displayTransformationKillReward = (content: string) => {\r\n  const transformationRewardContainer = document.getElementById(\r\n    \"transformed_hero_bonus_reward_container\"\r\n  )!;\r\n  transformationRewardContainer.innerHTML = content;\r\n  transformationRewardContainer.style.display = \"flex\";\r\n\r\n  if (currentTransformationRewardContainerTimeout) {\r\n    clearTimeout(currentTransformationRewardContainerTimeout);\r\n    currentTransformationRewardContainerTimeout = null;\r\n  }\r\n\r\n  currentRewardContainerTimeout = setTimeout(() => {\r\n    transformationRewardContainer.style.display = \"none\";\r\n  }, REWARD_TIMEOUT_DURATION);\r\n};\r\n\r\nconst hideReward = () => {};\r\n\r\nconst killEnemy = (enemy: Enemy) => {\r\n  const launchExplosion = () => {\r\n    launchAnimationAndDeclareItLaunched(\r\n      enemy.element.firstChild as HTMLImageElement,\r\n      0,\r\n      \"png\",\r\n      \"assets/challenge/explosion\",\r\n      1,\r\n      10,\r\n      1,\r\n      false,\r\n      ANIMATION_ID.opponent_death\r\n    );\r\n  };\r\n\r\n  launchExplosion();\r\n\r\n  destroyEnemyAndLaunchNewOne(enemy);\r\n};\r\n\r\nconst destroyEnemy = (enemy: Enemy) => {\r\n  clearAndHideAnswerDataContainer();\r\n\r\n  setTimeout(() => {\r\n    ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] = 0;\r\n    enemy.element.remove();\r\n    triggerOpponentsApparition();\r\n  }, 300);\r\n\r\n  ennemiesOnScreen.forEach((enemyOnScreen, index) => {\r\n    if (enemy === enemyOnScreen) {\r\n      ennemiesOnScreen.splice(index, 1);\r\n    }\r\n  });\r\n};\r\n\r\nconst destroyEnemyAndLaunchNewOne = (enemy: Enemy) => {\r\n  destroyEnemy(enemy);\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] = 0;\r\n};\r\n\r\nconst hurtHero = () => {\r\n  lifePoints.value--;\r\n  checkForHerosDeath();\r\n\r\n  if (score >= HERO_HURT_MALUS) {\r\n    score -= HERO_HURT_MALUS;\r\n    updateScoreDisplay();\r\n  }\r\n  updateLifePointsDisplay();\r\n  launchHeroHurtAnimation();\r\n  displayMalus(\"Malus! You were hurt!\");\r\n};\r\n\r\nconst checkForHerosDeath = () => {\r\n  if (lifePoints.value === 0) {\r\n    killHero();\r\n  }\r\n};\r\n\r\nconst killHero = () => {\r\n  heroIsAlive = false;\r\n  launchDeathAnimation();\r\n};\r\n\r\nconst detectCollision = () => {\r\n  ennemiesOnScreen.forEach((enemyOnScreen) => {\r\n    if (\r\n      heroContainer.getBoundingClientRect().left +\r\n        heroContainer.getBoundingClientRect().width >\r\n        enemyOnScreen.element.getBoundingClientRect().left &&\r\n      enemyOnScreen.collideable\r\n    ) {\r\n      enemyOnScreen.collideable = false;\r\n\r\n      if (!invisible) {\r\n        hurtHero();\r\n      }\r\n    }\r\n  });\r\n\r\n  requestAnimationFrame(detectCollision);\r\n};\r\n\r\nconst checkForScreenUpdateFromLeftToRight = (throttleNum: number): any => {\r\n  if (throttleNum < 10) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      checkForScreenUpdateFromLeftToRight(throttleNum)\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  //deletion\r\n\r\n  //pick first map block\r\n\r\n  const firstMapDomElement = MAPS[0];\r\n\r\n  if (firstMapDomElement.offsetLeft < -window.innerWidth) {\r\n    firstMapDomElement.remove();\r\n    MAPS.shift();\r\n  }\r\n\r\n  //creation\r\n\r\n  const lastMapDomElement = MAPS[MAPS.length - 1];\r\n\r\n  if (\r\n    lastMapDomElement &&\r\n    lastMapDomElement.offsetLeft <= window.innerWidth / 10\r\n  ) {\r\n    MAPS.push(\r\n      createMapBlock(\r\n        lastMapDomElement.offsetLeft + lastMapDomElement.offsetWidth\r\n      )\r\n    );\r\n  }\r\n\r\n  requestAnimationFrame(() => checkForScreenUpdateFromLeftToRight(throttleNum));\r\n};\r\n\r\nconst checkForScreenUpdateFromRightToLeft = (throttleNum: number): any => {\r\n  if (ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_right_to_left] === 0) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < 10) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      checkForScreenUpdateFromRightToLeft(throttleNum)\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  //creation\r\n\r\n  //pick first map block\r\n\r\n  const firstMapDomElement = MAPS[0];\r\n\r\n  if (\r\n    firstMapDomElement &&\r\n    firstMapDomElement.offsetLeft > -window.innerWidth\r\n  ) {\r\n    MAPS.unshift(\r\n      createMapBlock(\r\n        firstMapDomElement.offsetLeft - firstMapDomElement.offsetWidth\r\n      )\r\n    );\r\n  }\r\n\r\n  const lastMapDomElement = MAPS[MAPS.length - 1];\r\n\r\n  if (lastMapDomElement && lastMapDomElement.offsetLeft > window.innerWidth) {\r\n    lastMapDomElement.remove();\r\n    MAPS.pop();\r\n  }\r\n\r\n  requestAnimationFrame(() => checkForScreenUpdateFromRightToLeft(throttleNum));\r\n};\r\n\r\nconst launchHeroRunAnimation = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    `assets/challenge/characters/${\r\n      transformed ? \"transformed_hero\" : \"hero\"\r\n    }/run`,\r\n    1,\r\n    transformed ? 6 : 8,\r\n    1,\r\n    true,\r\n    transformed ? ANIMATION_ID.transformation_run : ANIMATION_ID.run\r\n  );\r\n};\r\n\r\nconst launchRun = () => {\r\n  if (timeStoped) {\r\n    return;\r\n  }\r\n  startCamera();\r\n  moveCamera(ANIMATION_ID.camera_left_to_right);\r\n  launchHeroRunAnimation();\r\n};\r\n\r\nconst heroInitialTop = heroContainer.getBoundingClientRect().top;\r\n\r\nconst launchFly = (jumpingForward = true) => {\r\n  // Get the hero's current position from the bottom style property\r\n  const currentTop = heroContainer.getBoundingClientRect().top;\r\n\r\n  if (jumpingForward) {\r\n    // Move the hero upwards\r\n    const newTop = currentTop - window.innerHeight * 0.005;\r\n    heroContainer.style.top = `${newTop}px`;\r\n\r\n    // Check if the hero has reached the peak\r\n    if (newTop <= heroInitialTop - window.innerHeight * 0.2) {\r\n      jumpingForward = false;\r\n    }\r\n  } else {\r\n    // Move the hero downwards\r\n    const newTop = currentTop + window.innerHeight * 0.005;\r\n    heroContainer.style.top = `${newTop}px`;\r\n\r\n    // Check if the hero has returned to the initial position\r\n    if (newTop >= heroInitialTop) {\r\n      heroContainer.style.top = `${heroInitialTop}px`;\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Continue the animation\r\n  requestAnimationFrame(() => launchFly(jumpingForward));\r\n};\r\ndocument.addEventListener(\"keydown\", (event) => {\r\n  if (event.key === \" \") {\r\n    launchInvisibilityToggle();\r\n  }\r\n  if (event.key === \"w\") {\r\n    launchAttack();\r\n  }\r\n  if (event.key === \"b\") {\r\n    launchTransformation();\r\n  }\r\n\r\n  if (event.key === \"v\") {\r\n    slowTime(10);\r\n  }\r\n\r\n  if (event.key === \"y\") {\r\n    launchDeathAnimation();\r\n  }\r\n\r\n  if (event.key === \"s\") {\r\n    if (timeStoped) {\r\n      cancelStopTimeSpell();\r\n    } else {\r\n      stopTime();\r\n    }\r\n  }\r\n});\r\n\r\nconst stopTime = () => {\r\n  timeStoped = true;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.attack] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.death] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.hurt] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.idle] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_death] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_move] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_right_to_left] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.character_left_to_right_move] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_pre_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_hurt] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.boss_idle] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.boss_attack] = 0;\r\n\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/hero/stop_time\",\r\n    1,\r\n    4,\r\n    1,\r\n    false,\r\n    ANIMATION_ID.stop_time\r\n  );\r\n};\r\n\r\nconst cancelStopTimeSpell = () => {\r\n  timeStoped = false;\r\n\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/hero/cancel_stop_time\",\r\n    1,\r\n    4,\r\n    1,\r\n    false,\r\n    ANIMATION_ID.cancel_stop_time\r\n  );\r\n\r\n  setTimeout(() => {\r\n    initAllAnimations();\r\n    launchRun();\r\n    ennemiesOnScreen.forEach((enemy) => launchOpponent(enemy));\r\n  }, 1000);\r\n};\r\n\r\nconst checkForOpponentsClearance = () => {\r\n  ennemiesOnScreen.forEach((enemyOnScreen) => {\r\n    if (\r\n      heroContainer.getBoundingClientRect().left +\r\n        heroContainer.getBoundingClientRect().width +\r\n        window.innerWidth * 0.05 >\r\n      enemyOnScreen.element.getBoundingClientRect().left\r\n    ) {\r\n    }\r\n    if (\r\n      enemyOnScreen.element.getBoundingClientRect().left <\r\n      0 - window.innerWidth * 0.05\r\n    ) {\r\n      destroyEnemyAndLaunchNewOne(enemyOnScreen);\r\n    }\r\n  });\r\n\r\n  requestAnimationFrame(checkForOpponentsClearance);\r\n};\r\n\r\nconst launchInvisibilityToggle = () => {\r\n  invisible = !invisible;\r\n\r\n  heroContainer.style.opacity = invisible ? \"0.3\" : \"1\";\r\n\r\n  if (!invisible) {\r\n    return;\r\n  }\r\n\r\n  setTimeout(launchInvisibilityToggle, INVISIBILITY_DURATION_IN_MILLISECONDS);\r\n};\r\n\r\nconst launchTransformation = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n\r\n  document.getElementById(\"transformation_background\")!.style.display = \"flex\";\r\n\r\n  heroImage.src = \"assets/challenge/characters/hero/walk/1.png\";\r\n\r\n  transformed = true;\r\n\r\n  setTimeout(() => {\r\n    launchAnimationAndDeclareItLaunched(\r\n      heroImage,\r\n      0,\r\n      \"png\",\r\n      \"assets/challenge/characters/transformed_hero/pre_run\",\r\n      1,\r\n      9,\r\n      1,\r\n      true,\r\n      ANIMATION_ID.transformation_pre_run\r\n    );\r\n\r\n    clearAllOponentsAndTimeouts();\r\n    ANIMATION_RUNNING_VALUES[ANIMATION_ID.opponent_run] = 0;\r\n\r\n    setTimeout(() => {\r\n      triggerOpponentsApparition();\r\n\r\n      document.getElementById(\"transformation_background\")!.style.display =\r\n        \"none\";\r\n\r\n      ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_pre_run] = 0;\r\n\r\n      launchAnimationAndDeclareItLaunched(\r\n        heroImage,\r\n        0,\r\n        \"png\",\r\n        \"assets/challenge/characters/transformed_hero/run\",\r\n        1,\r\n        6,\r\n        1,\r\n        true,\r\n        ANIMATION_ID.transformation_run\r\n      );\r\n\r\n      setTimeout(turnHeroTransformationOff, 5000);\r\n    }, 2000);\r\n  }, 500);\r\n};\r\n\r\nconst clearAllOponentsAndTimeouts = () => {\r\n  ennemiesOnScreen.forEach((enemy, index) => {\r\n    enemy.element.remove();\r\n    ennemiesOnScreen.splice(index, 1);\r\n  });\r\n};\r\n\r\nconst lightUpAnswerDataContainer = () => {\r\n  answerDataContainer.style.opacity = \"1\";\r\n};\r\n\r\nconst clearAndHideAnswerDataContainer = () => {\r\n  answerDataContainer.style.opacity = \"0.3\";\r\n  answerDataValue.innerHTML = \"\";\r\n};\r\n\r\nconst launchDeathAnimation = () => {\r\n  initHeroAnimations();\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] = 0;\r\n\r\n  const killHero = () => {\r\n    launchAnimationAndDeclareItLaunched(\r\n      heroImage,\r\n      0,\r\n      \"png\",\r\n      \"assets/challenge/characters/hero/death\",\r\n      1,\r\n      6,\r\n      1,\r\n      false,\r\n      ANIMATION_ID.death\r\n    );\r\n\r\n    setTimeout(() => alert(\"you're dead! The equilibrium is lost!\"), 1000);\r\n  };\r\n\r\n  if (transformed) {\r\n    transformed = false;\r\n  }\r\n\r\n  heroImage.src = \"assets/challenge/characters/hero/death/1.png\";\r\n\r\n  setTimeout(killHero, 1000);\r\n};\r\n\r\nconst launchHeroHurtAnimation = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    transformed\r\n      ? \"assets/challenge/characters/transformed_hero/hurt\"\r\n      : \"assets/challenge/characters/hero/hurt\",\r\n    1,\r\n    transformed ? 5 : 3,\r\n    1,\r\n    false,\r\n    transformed ? ANIMATION_ID.transformation_hurt : ANIMATION_ID.hurt\r\n  );\r\n\r\n  initHeroAnimations();\r\n\r\n  stopCamera();\r\n\r\n  setTimeout(() => {\r\n    if (heroIsAlive) {\r\n      launchRun();\r\n    }\r\n  }, 500);\r\n};\r\n\r\nconst stopCamera = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] = 0;\r\n};\r\n\r\nconst startCamera = () => {\r\n  if (ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right] > 0) {\r\n    return;\r\n  }\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.camera_left_to_right]++;\r\n};\r\n\r\nconst initHeroAnimations = () => {\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_pre_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.transformation_run] = 0;\r\n  ANIMATION_RUNNING_VALUES[ANIMATION_ID.hurt] = 0;\r\n};\r\n\r\nwindow.onload = () => {\r\n  MAPS.push(createMapBlock(0));\r\n  MAPS.push(createMapBlock(100));\r\n  updateLifePointsDisplay();\r\n  updateScoreDisplay();\r\n  launchRun();\r\n  detectCollision();\r\n  checkForScreenUpdateFromLeftToRight(10);\r\n  checkForOpponentsClearance();\r\n  triggerOpponentsApparition();\r\n};\r\n", "import {\r\n  ANIMATION_ID,\r\n  ANIMATION_RUNNING_VALUES,\r\n  THROTTLE_NUMS,\r\n  launchAnimationAndDeclareItLaunched,\r\n} from \"./challenge\";\r\n\r\nconst heroImage = document.getElementById(\"heroImage\")! as HTMLImageElement;\r\nconst bossImage = document.getElementById(\"bossImage\")! as HTMLImageElement;\r\n\r\nconst launchCharacterAnimation = (\r\n  characterElement: HTMLImageElement,\r\n  throttleNum: number,\r\n  extension: string,\r\n  spriteBase: string,\r\n  spriteIndex: number,\r\n  max: number,\r\n  min: number,\r\n  loop: boolean,\r\n  animationId: ANIMATION_ID\r\n): any => {\r\n  if (!characterElement) alert(\"no element no more!\");\r\n\r\n  if (\r\n    !ANIMATION_RUNNING_VALUES[animationId] ||\r\n    ANIMATION_RUNNING_VALUES[animationId] > 1\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  if (throttleNum < THROTTLE_NUMS[animationId]) {\r\n    throttleNum++;\r\n    return requestAnimationFrame(() =>\r\n      launchCharacterAnimation(\r\n        characterElement,\r\n        throttleNum,\r\n        extension,\r\n        spriteBase,\r\n        spriteIndex,\r\n        max,\r\n        min,\r\n        loop,\r\n        animationId\r\n      )\r\n    );\r\n  }\r\n\r\n  throttleNum = 0;\r\n\r\n  if (spriteIndex === max) {\r\n    if (loop === false) {\r\n      ANIMATION_RUNNING_VALUES[animationId] = 0;\r\n      return;\r\n    }\r\n\r\n    spriteIndex = min;\r\n  } else {\r\n    spriteIndex++;\r\n  }\r\n\r\n  characterElement.src = `${spriteBase}/${spriteIndex}.${extension}`;\r\n\r\n  requestAnimationFrame(() =>\r\n    launchCharacterAnimation(\r\n      characterElement,\r\n      throttleNum,\r\n      extension,\r\n      spriteBase,\r\n      spriteIndex,\r\n      max,\r\n      min,\r\n      loop,\r\n      animationId\r\n    )\r\n  );\r\n};\r\n\r\nconst launcHeroIdle = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    heroImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/hero/idle\",\r\n    1,\r\n    7,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.idle\r\n  );\r\n};\r\n\r\nconst launchBossIdle = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    bossImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/bosses/ctuluhu/idle\",\r\n    1,\r\n    15,\r\n    1,\r\n    true,\r\n    ANIMATION_ID.boss_idle\r\n  );\r\n};\r\nconst launchBossAttack = () => {\r\n  launchAnimationAndDeclareItLaunched(\r\n    bossImage,\r\n    0,\r\n    \"png\",\r\n    \"assets/challenge/characters/bosses/ctuluhu/attack\",\r\n    1,\r\n    17,\r\n    1,\r\n    false,\r\n    ANIMATION_ID.boss_attack\r\n  );\r\n};\r\nwindow.onload = () => {\r\n  launcHeroIdle();\r\n  launchBossIdle();\r\n  setTimeout(() => {\r\n    ANIMATION_RUNNING_VALUES[ANIMATION_ID.boss_idle] = 0;\r\n    launchBossAttack();\r\n  }, 1000);\r\n};\r\n"],
  "mappings": "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",
  "names": ["killHero", "heroImage", "heroImage"]
}
